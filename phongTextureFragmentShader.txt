#version 430

in vec3 position_eye;
in vec3 normal_eye;
in vec2 texture_coordinates;

// light properties
struct Light
{
	vec3 position;	// light position in world
	vec3 Ls; // specular colour
	vec3 Ld; // diffuse light colour
	vec3 La; // ambient colour
};

// material properties
struct Material
{
	vec3 Ks; // specular light reflectance
	vec3 Kd; // diffuse surface reflectance
	vec3 Ka; // ambient light reflectance
	float specular_exponent; // specular 'power'
};

out vec4 fragment_colour; // colour of surface

uniform mat4 view_mat;
uniform Light light;
uniform Material material;
uniform sampler2D textureSample;

void main()
{
	// ambient intensity
	vec3 Ia = light.La * material.Ka;

	// diffuse intensity
	vec3 light_position_eye = vec3 (view_mat * vec4 (light.position, 1.0));	// raise light position to eye space
	vec3 distance_to_light_eye = light_position_eye - position_eye;
	vec3 direction_to_light_eye = normalize (distance_to_light_eye);
	float dot_prod = dot (direction_to_light_eye, normal_eye);
	dot_prod = max (dot_prod, 0.0);
	vec3 Id = light.Ld * material.Kd * dot_prod;

	// specular intensity
	vec3 reflection_eye = reflect (-direction_to_light_eye, normal_eye);
	vec3 surface_to_viewer_eye = normalize (-position_eye);
	float dot_prod_specular = dot (reflection_eye, surface_to_viewer_eye);
	dot_prod_specular = max (dot_prod_specular, 0.0);
	float specular_factor = pow (dot_prod_specular, material.specular_exponent);
	vec3 Is = light.Ls * material.Ks * specular_factor;

	// get the color from the texture
	vec4 texture_color = texture(textureSample, texture_coordinates);

	// colour of surface
	fragment_colour = vec4 ((Is + Id + Ia), 1.0) * texture_color;
}